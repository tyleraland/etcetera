#!/usr/bin/env python

"""
Parses settings.conf and provides top-level script
"""
import os
import sys
import argparse

from os import path
from ConfigParser import SafeConfigParser

from scripts.db import dbcreate, dbinsert

settings_file = path.join(path.dirname(__file__), 'settings.conf')

class config:
    """
    Class with method that returns the desired sections AND default, as dictionary
    """
    def __init__(self, settings):
        self.settings = settings
    def sections(self, sections):
        return dict(self.settings.items('Default') +
                    reduce(lambda l1,l2: l1 + l2,
                           [self.settings.items(section) for section in sections],
                           [])
                    )

def get_args():
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--venv')
    parser.add_argument('--gps', action='store_true')
    parser.add_argument('--sms', action='store_true')
    parser.add_argument('--twitter', action='store_true')
    parser.add_argument('--fitbit', action='store_true')
    parser.add_argument('--rescuetime', action='store_true')
    parser.add_argument('--calls', action='store_true')
    parser.add_argument('--last_fm', action='store_true')
    return parser.parse_args()

def main():
    args = get_args()
    settings = SafeConfigParser(allow_no_value=True)
    settings.read(settings_file)

    conf = config(settings)
    defaultconf = conf.sections(['Default'])

    if args.venv:
        activate_this = os.path.join(args.venv, 'bin', 'activate_this.py')
        execfile(activate_this, dict(__file__=activate_this))

    working = path.dirname(__file__)

    database = defaultconf['database']
    dbcreate(defaultconf)

    ### GPS ###
    if args.gps:
        from scripts.gps_feed import fetch_gps
        settings.read(os.path.join(working, 'secrets','dropbox_secrets.conf'))
        gps_feed = fetch_gps(conf.sections(['dropbox', 'gps']))
        dbinsert(defaultconf, 'gps', gps_feed)

    #### Calls ####
    if args.calls:
        from scripts.calls_feed import fetch_calls
        settings.read(os.path.join(working, 'secrets','dropbox_secrets.conf'))
        calls_feed = fetch_calls('outgoing_calls', conf.sections(['dropbox', 'calls']))
        dbinsert(defaultconf, 'outgoing_calls', calls_feed)
        calls_feed = fetch_calls('received_calls', conf.sections(['dropbox', 'calls']))
        dbinsert(defaultconf, 'received_calls', calls_feed)
        calls_feed = fetch_calls('missed_calls', conf.sections(['dropbox', 'calls']))
        dbinsert(defaultconf, 'missed_calls', calls_feed)

    #### last.fm ####
    if args.last_fm:
        from scripts.last_fm_feed import fetch_last_fm
        settings.read(os.path.join(working, 'secrets','dropbox_secrets.conf'))
        last_fm_feed = fetch_last_fm(conf.sections(['dropbox', 'last_fm']))
        dbinsert(defaultconf, 'last_fm', last_fm_feed)

    #### SMS ####
    if args.sms:
        from scripts.sms_feed import fetch_sms
        settings.read(os.path.join(working, 'secrets','dropbox_secrets.conf'))
        sms_recv_feed = fetch_sms('sms_received', conf.sections(['dropbox', 'sms']))
        dbinsert(defaultconf, 'sms_received', sms_recv_feed)
        sms_sent_feed = fetch_sms('sms_sent', conf.sections(['dropbox', 'sms']))
        dbinsert(defaultconf, 'sms_sent', sms_sent_feed)

    #### Twitter ####
    if args.twitter:
        from scripts.twitter_feed import fetch_twitter
        settings.read(os.path.join(working, 'secrets','twitter_secrets.conf'))
        twitter_feed = fetch_twitter(conf.sections(['Twitter']))
        dbinsert(defaultconf, 'Twitter', twitter_feed)

    #### Fitbit ####
    if args.fitbit:
        from scripts.fitbit_feed import fetch_fitbit
        settings.read(os.path.join(working, 'secrets','fitbit_secrets.conf'))
        fitbit_feed = fetch_fitbit(conf.sections(['fitbit']))
        dbinsert(defaultconf, 'fitbit_intraday_steps', fitbit_feed)

    ### RescueTime ###
    if args.rescuetime:
        from scripts.rescuetime_feed import fetch_rescuetime
        settings.read(os.path.join(working, 'secrets','rescuetime_secrets.conf'))
        rescuetime_feed = fetch_rescuetime(conf.sections(['rescuetime']))
        dbinsert(defaultconf, 'rescuetime', rescuetime_feed)

if __name__ == '__main__':
    sys.exit(main())
